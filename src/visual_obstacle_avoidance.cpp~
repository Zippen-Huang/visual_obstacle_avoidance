#include "ros/ros.h"
#include "bupimo_msgs/Blob.h"
#include "bupimo_msgs/BlobArray.h"
#include "geometry_msgs/Twist.h"
#include "std_msgs/Float64.h"

#include "Vector2d.h"

#include <stdio.h>
#include <string>

using namespace std;

// Global Variables
float currentHeading = 0.;
float currentLinearVel = 0.;

bool firstBlobs = false;

bool blobBeyondThreshold = false;
float bearingToObstacle = 0.;

float proximityThreshold = 210.;

void BlobBearingsCallback(const bupimo_msgs::BlobArray::ConstPtr& msg){
   
  // Get number of blobs detected
  int nBlobs = msg->blobArray.size();
  
  float minDist = 99999.;

  blobBeyondThreshold = false;
  
  for(int i = 0; i < nBlobs; i++){
    firstBlobs = true;
    
    float blobBearing = msg->blobArray[i].bearing;
    float blobX = msg->blobArray[i].x;
    float blobY = msg->blobArray[i].y;

    float blobDist = sqrt(blobX*blobX + blobY*blobY);
    
    if(blobDist < minDist){
      minDist = blobDist;
      bearingToObstacle = blobBearing;
    }    

  }

  if(minDist < proximityThreshold){
    blobBeyondThreshold = true;
  }

  
}

void CurrentHeadingCallback(const std_msgs::Float64::ConstPtr& msg){
  currentHeading = msg->data;
}

void CurrentLinearVelCallback(const std_msgs::Float64::ConstPtr& msg){
  currentLinearVel = msg->data;
}

int main(int argc, char **argv){
  ros::init(argc, argv, "visual_obstacle_avoidance");

  ros::NodeHandle n;
 
  ros::Publisher twist_pub = n.advertise<geometry_msgs::Twist>("cmd_vel", 1000);

  ros::Subscriber blob_Sub = n.subscribe("blobsGlobal", 1000, BlobBearingsCallback);  
  ros::Subscriber currentHeading_Sub = n.subscribe("currentHeading", 1000, CurrentHeadingCallback);
  ros::Subscriber currentLinearVel_Sub = n.subscribe("currentLinearVel", 1000, CurrentLinearVelCallback);
  
  ros::Rate loop_rate(10);
  
  while (ros::ok()){

    if(!firstBlobs){
      printf("Waiting for first blob...\n");
      ros::spinOnce();
      loop_rate.sleep();
      continue;
    }

    if(blobBeyondThreshold){
      float targetHeading = 0.;
      float targetLinearVel = 1.; 
      
      // Change to degrees
      targetHeading = bearingToObstacle + 90.;
      
      geometry_msgs::Twist msg;
      
      // Use a proportional controller
      float headingError = -1.*(targetHeading - currentHeading) ;
      
      if(fabs(headingError) > 180.){
	headingError = 180. - headingError;
      }
      
      // Now convert to radians (per second)
      headingError = headingError * M_PI/180.;
      
      // set values of twist msg.
      msg.linear.x = 0.075*targetLinearVel;
      msg.angular.z = 2.*headingError;
      msg.angular.y = -1.;
      
      // Need to remove excess digits for transmission over serial.
      msg.linear.x = roundf(msg.linear.x * 100.) / 100.;
      msg.angular.z = roundf(msg.angular.z * 100.) / 100.; 
      
      // publish twist msg.
      twist_pub.publish(msg);
    }
    else{
      geometry_msgs::Twist msg;
      msg.linear.x = 0.;
      msg.angular.z = 0.;
      msg.angular.y = -1.;
      twist_pub.publish(msg);
    }
    
    //printf("%f\t%f\t%f\n", dot, msg.linear.x, msg.angular.z);
    //printf("~~~~~~~~~~~~~~~~~~~~~~~\n");
    //getchar();
    
    ros::spinOnce();

    loop_rate.sleep();
  }
  return 0;
};
